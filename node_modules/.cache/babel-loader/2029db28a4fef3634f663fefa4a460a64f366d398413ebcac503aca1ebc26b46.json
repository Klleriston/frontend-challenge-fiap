{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para adicionar token JWT\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const documentService = {\n  validateDocument: documentData => {\n    return api.post('/documentos/validar', documentData);\n  }\n};\nexport const biometricService = {\n  validateDigitalBiometry: imageUrl => {\n    return api.post('/biometria/digital', {\n      imageUrl\n    });\n  },\n  validateDigitalBiometryBase64: imageBase64 => {\n    return api.post('/biometria/digital', {\n      imageBase64\n    });\n  },\n  validateFacialBiometry: imageUrl => {\n    return api.post('/biometria/facial', {\n      imageUrl\n    });\n  },\n  validateFacialBiometryBase64: imageBase64 => {\n    return api.post('/biometria/facial', {\n      imageBase64\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","documentService","validateDocument","documentData","post","biometricService","validateDigitalBiometry","imageUrl","validateDigitalBiometryBase64","imageBase64","validateFacialBiometry","validateFacialBiometryBase64"],"sources":["/Users/klleristonandrade/develop/intelij/Challenge/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Interceptor para adicionar token JWT\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport const documentService = {\n  validateDocument: (documentData) => {\n    return api.post('/documentos/validar', documentData);\n  }\n};\n\nexport const biometricService = {\n  validateDigitalBiometry: (imageUrl) => {\n    return api.post('/biometria/digital', { imageUrl });\n  },\n  \n  validateDigitalBiometryBase64: (imageBase64) => {\n    return api.post('/biometria/digital', { imageBase64 });\n  },\n  \n  validateFacialBiometry: (imageUrl) => {\n    return api.post('/biometria/facial', { imageUrl });\n  },\n  \n  validateFacialBiometryBase64: (imageBase64) => {\n    return api.post('/biometria/facial', { imageBase64 });\n  }\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG;EAC7BC,gBAAgB,EAAGC,YAAY,IAAK;IAClC,OAAOjB,GAAG,CAACkB,IAAI,CAAC,qBAAqB,EAAED,YAAY,CAAC;EACtD;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG;EAC9BC,uBAAuB,EAAGC,QAAQ,IAAK;IACrC,OAAOrB,GAAG,CAACkB,IAAI,CAAC,oBAAoB,EAAE;MAAEG;IAAS,CAAC,CAAC;EACrD,CAAC;EAEDC,6BAA6B,EAAGC,WAAW,IAAK;IAC9C,OAAOvB,GAAG,CAACkB,IAAI,CAAC,oBAAoB,EAAE;MAAEK;IAAY,CAAC,CAAC;EACxD,CAAC;EAEDC,sBAAsB,EAAGH,QAAQ,IAAK;IACpC,OAAOrB,GAAG,CAACkB,IAAI,CAAC,mBAAmB,EAAE;MAAEG;IAAS,CAAC,CAAC;EACpD,CAAC;EAEDI,4BAA4B,EAAGF,WAAW,IAAK;IAC7C,OAAOvB,GAAG,CAACkB,IAAI,CAAC,mBAAmB,EAAE;MAAEK;IAAY,CAAC,CAAC;EACvD;AACF,CAAC;AAED,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}