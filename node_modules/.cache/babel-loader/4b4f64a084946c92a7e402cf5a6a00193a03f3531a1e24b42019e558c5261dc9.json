{"ast":null,"code":"import api from './api';\nconst TOKEN_KEY = 'quod_auth_token';\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data && response.data.token) {\n        localStorage.setItem(TOKEN_KEY, response.data.token);\n        return {\n          success: true,\n          user: {\n            email\n          }\n        };\n      }\n      return {\n        success: false,\n        error: 'Credenciais inválidas'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Falha na autenticação'\n      };\n    }\n  },\n  register: async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/register', {\n        name,\n        email,\n        password\n      });\n      return {\n        success: true,\n        user: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Falha no registro'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return !!token; // retorna true se o token existir\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","TOKEN_KEY","authService","login","email","password","response","post","data","token","localStorage","setItem","success","user","error","_error$response","_error$response$data","message","register","name","_error$response2","_error$response2$data","logout","removeItem","getToken","getItem","isAuthenticated"],"sources":["/Users/klleristonandrade/develop/intelij/Challenge/client/src/services/auth.js"],"sourcesContent":["import api from './api';\n\nconst TOKEN_KEY = 'quod_auth_token';\n\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      if (response.data && response.data.token) {\n        localStorage.setItem(TOKEN_KEY, response.data.token);\n        return { success: true, user: { email } };\n      }\n      return { success: false, error: 'Credenciais inválidas' };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Falha na autenticação' \n      };\n    }\n  },\n\n  register: async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/register', { name, email, password });\n      return { success: true, user: response.data };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Falha no registro' \n      };\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n\n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n\n  isAuthenticated: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    return !!token; // retorna true se o token existir\n  }\n};\n\nexport default authService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,SAAS,GAAG,iBAAiB;AAEnC,OAAO,MAAMC,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,aAAa,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MACnE,IAAIC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;QACxCC,YAAY,CAACC,OAAO,CAACV,SAAS,EAAEK,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QACpD,OAAO;UAAEG,OAAO,EAAE,IAAI;UAAEC,IAAI,EAAE;YAAET;UAAM;QAAE,CAAC;MAC3C;MACA,OAAO;QAAEQ,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAE;MAAwB,CAAC;IAC3D,CAAC,CAAC,OAAOA,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,OAAO;QACLJ,OAAO,EAAE,KAAK;QACdE,KAAK,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI;MAC1C,CAAC;IACH;EACF,CAAC;EAEDC,QAAQ,EAAE,MAAAA,CAAOC,IAAI,EAAEf,KAAK,EAAEC,QAAQ,KAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAE;QAAEY,IAAI;QAAEf,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC5E,OAAO;QAAEO,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAEP,QAAQ,CAACE;MAAK,CAAC;IAC/C,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAM,gBAAA,EAAAC,qBAAA;MACd,OAAO;QACLT,OAAO,EAAE,KAAK;QACdE,KAAK,EAAE,EAAAM,gBAAA,GAAAN,KAAK,CAACR,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI;MAC1C,CAAC;IACH;EACF,CAAC;EAEDK,MAAM,EAAEA,CAAA,KAAM;IACZZ,YAAY,CAACa,UAAU,CAACtB,SAAS,CAAC;EACpC,CAAC;EAEDuB,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOd,YAAY,CAACe,OAAO,CAACxB,SAAS,CAAC;EACxC,CAAC;EAEDyB,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMjB,KAAK,GAAGC,YAAY,CAACe,OAAO,CAACxB,SAAS,CAAC;IAC7C,OAAO,CAAC,CAACQ,KAAK,CAAC,CAAC;EAClB;AACF,CAAC;AAED,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}